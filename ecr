pipeline {
    agent any
    tools {
        jdk 'jdk17'
        maven 'maven'
    }
    environment {
        AWS_DEFAULT_REGION = 'ap-south-1'
        ECR_REPOSITORY = '591334581876.dkr.ecr.ap-south-1.amazonaws.com/maa'
        APP_NAME = 'my-app'
        DOCKER_USER = 'maa'
        IMAGE_NAME = "${DOCKER_USER}/${APP_NAME}"
    }
    stages {
        stage('Checkout') {
            steps {
                git branch: 'ec', credentialsId: 'github', url: 'https://github.com/majjinarayanarao/register-app.git'
            }
        }
        stage('Build') {
            steps {
                script {
                    sh 'docker build -t ${APP_NAME} .'
                }
            }
        }
        stage('Push to ECR') {
            steps {
                script {
                    withAWS(region: AWS_DEFAULT_REGION, credentials: 'aws') {
                        sh "aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${ECR_REPOSITORY}"
                      //  sh "docker tag ${APP_NAME} ${ECR_REPOSITORY}:latest"
                       // sh "docker push ${ECR_REPOSITORY}:latest"
                         // Build Docker image
                        sh 'docker build -t $ECR_REGISTRY/my-app:$BUILD_NUMBER .'

                // Push Docker image to ECR
                      sh 'docker push $ECR_REGISTRY/my-app:$BUILD_NUMBER'
                    }
                }
            }
        }
        stage('Cleanup') {
            steps {
                script {
                    // Clean up Docker images
                    sh "docker rmi ${APP_NAME}"
                    sh "docker rmi ${ECR_REPOSITORY}:$BUILD_NUMBER"
                    
                    // Clean up any other artifacts or files
                    // For example, you might want to delete temporary files or directories
                }
           }
        }
      
        stage('Deploy to EKS') {
            steps {
                script {
                    withAWS(region: AWS_DEFAULT_REGION, credentials: 'aws') {
                        sh "aws eks update-kubeconfig --name ${EKS_CLUSTER_NAME}"
                        sh "kubectl apply -f your-kubernetes-manifests.yaml -n ${EKS_NAMESPACE}"
                    }
                }
            }
        }
}
}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-deployment
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app-container
        image: 591334581876.dkr.ecr.ap-south-1.amazonaws.com/maa:$BUILD_NUMBER
        ports:
        - containerPort: 8080
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
spec:
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080
  type: LoadBalancer



pipeline {
    agent any

    environment {
        // Define environment variables
        SONAR_TOKEN = credentials('sonar-token')
        AWS_ACCESS_KEY_ID = credentials('aws-access-key-id')
        AWS_SECRET_ACCESS_KEY = credentials('aws-secret-access-key')
        AWS_REGION = 'your-aws-region'
        ECR_REGISTRY = 'your-ecr-registry'
        KUBECONFIG = '/path/to/your/kubeconfig'
    }

    stages {
        stage('Checkout') {
            steps {
                // Checkout the code from the Git repository
                git 'your-git-repository-url'
            }
        }

        stage('Build and Test') {
            steps {
                // Build and run unit tests
                sh 'mvn clean install'

                // Run SonarQube analysis
                withSonarQubeEnv('SonarQube Server') {
                    sh 'mvn sonar:sonar -Dsonar.login=$SONAR_TOKEN'
                }
            }
        }

        stage('Build and Push Docker Image') {
            steps {
                // Login to AWS ECR
                withCredentials([string(credentialsId: 'aws-ecr-credentials', variable: 'AWS_ECR_CREDENTIALS')]) {
                    sh 'aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $ECR_REGISTRY'
                }

                // Build Docker image
                sh 'docker build -t $ECR_REGISTRY/my-app:$BUILD_NUMBER .'

                // Push Docker image to ECR
                sh 'docker push $ECR_REGISTRY/my-app:$BUILD_NUMBER'
            }
        }

        stage('Deploy to EKS') {
            steps {
                // Authenticate with EKS
                withCredentials([file(credentialsId: 'kubeconfig', variable: 'KUBECONFIG')]) {
                    sh 'export KUBECONFIG=$KUBECONFIG'
                }

                // Deploy to EKS using ArgoCD
                sh 'argocd app sync my-app --repo https://github.com/your-repo.git --revision HEAD'
            }
        }
    }
}

